const command = require('nodemon/lib/config/command');
const TelegramBot = require('node-telegram-bot-api');
const { Telegraf, Markup } = require('telegraf')
const { Keyboard } = require('telegram-keyboard');
require('dotenv').config();
const text = require('./const');
const bot = new Telegraf(process.env.BOT_TOKEN)
const botMessage = new TelegramBot(process.env.BOT_TOKEN);

bot.start((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name} ${text.command}`))
bot.help((ctx) => ctx.reply(text.command))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.hears('–ü—Ä–∏–≤–µ—Ç', (ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${text.command}`))










bot.command('new_application', async (ctx) => {
    let application = [];

    const chatId = ctx.message.from.id;
    console.log(chatId)

    function problem() {
        ctx.replyWithHTML('<b>–ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>', Markup.keyboard(
            [
                [Markup.button.callback('–ü—Ä–∏–Ω—Ç–µ—Ä')],
                [Markup.button.callback('–ö–æ–º–ø—å—é—Ç–µ—Ä')],
                [Markup.button.callback('–ú–æ–Ω–∏–æ—Ä')]
            ]
        ))
    }


    let appl = [
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä',
        '1 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
        '2 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
        '3 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
        '4 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
    ]

    try {
        await ctx.replyWithHTML('<b>–ö–∞–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</b>', Markup.keyboard(
            [
                [Markup.button.callback(appl[0])],
                [Markup.button.callback('1 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞'), Markup.button.callback('2 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞')],
                [Markup.button.callback('3 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞'), Markup.button.callback('4 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞')],
                [Markup.button.callback('10 –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞'), Markup.button.callback('–ñ–µ–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')],
                [Markup.button.callback('–¢–ü'), Markup.button.callback('–¶–ú–†')],
            ]
        ))

for ( i of appl) {

    bot.hears(i, async (ctx) => {
        console.log(ctx.message.text)
        application.push(ctx.message.text)
        problem()
    })
} 


        // bot.hears('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä', async (ctx) => {
        //     console.log(ctx.message.text)
        //     application.push(ctx.message.text)
        //     problem()
        // })


        // bot.hears('–¢–ü', async (ctx) => {
        //     console.log(ctx.message.text)
        //     application.push(ctx.message.text)
        //     problem()
        // })


        // bot.hears('–¶–ú–†', async (ctx) => {
        //     console.log(ctx.message.text)
        //     application.push(ctx.message.text)
        //     problem()
        // })






        bot.hears('–ü—Ä–∏–Ω—Ç–µ—Ä', async (ctx) => {
            console.log(ctx.message.text)
            application.push(ctx.message.text)
            for (i of application) {
                botMessage.sendMessage('347867666', i);
                botMessage.sendMessage(chatId, i);

            }
            await ctx.replyWithHTML('–ö–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç', Markup.keyboard(
                [
                    [Markup.button.callback('1')],
                    [Markup.button.callback('2')],
                    [Markup.button.callback('3')]
                ]
            ))
        })



























































































































































































































































































































































































































































































































        console.log(application)
    } catch (e) {
        console.error(e)
    }
})


// bot.on('text', (ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name} ${text.command}`))
bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))






